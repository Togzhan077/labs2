Task1
CREATE OR REPLACE FUNCTION get_record(pattern TEXT)
RETURNS TABLE(id BIGINT, name TEXT, phone TEXT) AS $$
BEGIN
    RETURN QUERY
    SELECT pb.id, pb.name::TEXT, pb.phone::TEXT
    FROM phonebook pb
    WHERE pb.name ILIKE '%' || pattern || '%'
       OR pb.phone ILIKE '%' || pattern || '%';
END;
$$ LANGUAGE plpgsql;

Task2
CREATE OR REPLACE PROCEDURE upsert(new_user_name TEXT, new_phone TEXT)
LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM phonebook WHERE name = new_user_name) THEN
        UPDATE phonebook
        SET phone = new_phone
        WHERE name = new_user_name;
    ELSE
        INSERT INTO phonebook (name, phone)
        VALUES (new_user_name, new_phone);
    END IF;
END;
$$;

Task5
CREATE OR REPLACE PROCEDURE deleting(name_del text, phone_del text)
LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM phonebook WHERE name = name_del) THEN
        DELETE FROM phonebook WHERE name = name_del AND phone = phone_del;
    ELSE
        RAISE NOTICE 'Does not exist';
    END IF;
END;
$$;

Task4
CREATE OR REPLACE PROCEDURE insert_many_users(
    user_list JSONB,
    OUT incorrect_data JSONB
)
LANGUAGE plpgsql AS $$
DECLARE
    user_record JSONB;
    user_name TEXT;
    user_phone TEXT;
BEGIN
    incorrect_data := '[]'::JSONB;

    FOR user_record IN SELECT * FROM jsonb_array_elements(user_list)
    LOOP
        user_name := user_record->>'name';
        user_phone := user_record->>'phone';

        IF user_name IS NULL OR user_phone IS NULL OR user_phone !~ '^\+?[0-9]+$' THEN
            incorrect_data := incorrect_data || to_jsonb(user_record);
        ELSE
            IF EXISTS (SELECT 1 FROM phonebook WHERE name = user_name) THEN
                UPDATE phonebook
                SET phone = user_phone
                WHERE name = user_name;
            ELSE
                INSERT INTO phonebook (name, phone)
                VALUES (user_name, user_phone);
            END IF;
        END IF;
    END LOOP;
END;
$$;

CREATE OR REPLACE PROCEDURE insert_multiple_users(user_list record[])
LANGUAGE plpgsql AS $$
DECLARE
    user_record record;
BEGIN
    -- Iterate over each element in the array (user_list)
    FOREACH user_record IN ARRAY user_list
    LOOP
        -- Check if the user already exists, then update or insert accordingly
        IF EXISTS (SELECT 1 FROM phonebook WHERE name = user_record.name) THEN
            UPDATE phonebook
            SET phone = user_record.phone
            WHERE name = user_record.name;
        ELSE
            INSERT INTO phonebook (name, phone)
            VALUES (user_record.name, user_record.phone);
        END IF;
    END LOOP;
END;
$$;

CALL insert_many_users('[
    {"name": "Lusy", "phone": "44455545454"}
]'::JSONB);